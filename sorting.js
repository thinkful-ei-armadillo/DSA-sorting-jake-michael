/*
      [21, 1, 26, 45, 29, 28, 2, 9, 16, 49, 39, 27, 43, 34, 46, 40];
                                  //1
      [21, 1, 26, 45, 29, 28, 2, 9] [16, 49, 39, 27, 43, 34, 46, 40]
                  //2                             //3
     [21, 1, 26, 45] [29, 28, 2, 9] [16, 49, 39, 27] [43, 34, 46, 40]
          //4               //5            //6              //6
   [21, 1] [26, 45] [29, 28] [2, 9] [16, 49] [39, 27] [43, 34] [46, 40]
    //7       8         9       10      11      12        13      14 
[21] [1] [26] [45] [29] [28] [2] [9] [16] [49] [39] [27] [43] [34] [46] [40]
//  15       16        17       18       19        20        21        22
    [1, 21] [26, 45] [28, 29] [2, 9] [16, 49] [27, 39] [34, 43] [40, 46]

      [1, 21, 26, 45] [2, 9, 28, 29] [16, 27, 39, 49] [34, 40, 43, 46]

      [1, 2, 9, 21, 26, 28, 29, 45] [16, 27, 34, 39, 40, 43, 46, 49]

      [1, 2, 9, 16, 21, 26, 27, 28, 29, 34, 39, 40, 43, 45, 46, 49]
*/

//1. Understanding merge sort

//1a. 
//[16, 49, 39, 27, 43, 34, 46, 40]

//1b.
// [26, 45]

//1c.
// [1, 21]

//1d.
// [34, 43]

//2. Understanding quicksort

// 2a.

// 14 or 17 could have been the pivot. All numbers to the left
// of either are less than while all to the right are greater than.

//2a.
// Using 12 as the pivot:
// 3, 9, 10, 12, 19, 14, 17, 16, 13, 15
//2b.
// Using 14 as pivot:
//[14,	13,	10,	3,	9,	12,	15,	16,	19,	17]


